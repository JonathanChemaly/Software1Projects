import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jonathan Chemaly
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Prints the beginning of the html file
        out.println("<html>");
        out.println("<head>");

        //Prints the title from user inputed url
        String title = "Empty Title";
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() != 0) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .toString();
            out.println("<title>" + title + "</title>");
        } else {
            out.println("<title> Empty Title </title>");
        }

        //Prints the link from the user inputed Url
        out.println("</head> <body>");
        out.println(
                "<h1> <a href ='"
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "'>" + title + "</a> </h1>");

        //Prints the description form the user inputed url
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() != 0) {
            String description = channel
                    .child(getChildElement(channel, "description")).child(0)
                    .toString();
            out.println("<p>" + description + "</p>");
        } else {
            out.println("<title> No description </title>");
        }

        //Starts the table in the html file
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<strong><th>Date</th></strong>");
        out.println("<strong><th>Source</th></strong>");
        out.println("<strong><th>News</th></strong>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Closes the table started in the header, body adn html tags
        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * Goes through every child in the channel and finds which one's label
         * is equal to the tag parameter
         */
        int index = -1;
        boolean found = false;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag) && found == false) {
                index = i;
                found = true;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        //checks if the date tag exists and prints it to the output file
        if (item.numberOfChildren() != 0
                && getChildElement(item, "pubDate") != -1) {
            String date = item.child(getChildElement(item, "pubDate")).child(0)
                    .toString();
            out.println("<td>" + date + "</td>");
        } else {
            out.println("<td> No date available </td>");
        }

        //checks if the source tag exists and prints it to the output file
        if (item.numberOfChildren() != 0
                && getChildElement(item, "source") != -1) {
            if (item.child(getChildElement(item, "source"))
                    .numberOfChildren() != 0) {
                String source = item.child(getChildElement(item, "source"))
                        .child(0).toString();
                out.println("<td> <a href='"
                        + item.child(getChildElement(item, "source"))
                                .attributeValue("url")
                        + "'>" + source + "</a> </td>");
            } else {
                out.println("<td> No date available </td>");
            }
        }

        /*
         * Checks if the title or description children exist within item and
         * prioritizes displaying title name before description and connecting
         * it to the link found in the link child of item if possible
         */
        if (item.numberOfChildren() != 0
                && (getChildElement(item, "title") != -1
                        || getChildElement(item, "description") != -1)) {
            //Checks each possible outcome prioritizing the title and having the link
            if ((getChildElement(item, "title") != -1
                    && item.child(getChildElement(item, "title"))
                            .numberOfChildren() != 0
                    && (getChildElement(item, "link") != -1
                            && item.child(getChildElement(item, "link"))
                                    .numberOfChildren() != 0))) {
                String title = item.child(getChildElement(item, "title"))
                        .child(0).toString();
                out.println(
                        "<td> <a href='"
                                + item.child(getChildElement(item, "link"))
                                        .child(0).label()
                                + "'>" + title + "</a> </td>");
            } else if (item.child(getChildElement(item, "description"))
                    .numberOfChildren() != 0
                    && (getChildElement(item, "link") != -1
                            && item.child(getChildElement(item, "link"))
                                    .numberOfChildren() != 0)) {
                String description = item.child(getChildElement(item, "title"))
                        .child(0).toString();
                out.println(
                        "<td> <a href='"
                                + item.child(getChildElement(item, "link"))
                                        .child(0).label()
                                + "'>" + description + "</a> </td>");
            } else if (getChildElement(item, "title") != -1
                    && item.child(getChildElement(item, "title"))
                            .numberOfChildren() != 0) {
                String title = item.child(getChildElement(item, "title"))
                        .child(0).toString();
                out.println("<td>" + title + " </td>");
            } else if (getChildElement(item, "description") != -1
                    && item.child(getChildElement(item, "description"))
                            .numberOfChildren() != 0) {
                String description = item.child(getChildElement(item, "title"))
                        .child(0).toString();
                out.println("<td>" + description + " </td>");
            } else if (getChildElement(item, "description") != -1
                    && item.child(getChildElement(item, "link"))
                            .numberOfChildren() != 0) {
                out.println(
                        "<td> <a href='"
                                + item.child(getChildElement(item, "link"))
                                        .child(0).label()
                                + "'> No title available </a> </td>");
            } else {
                out.println("<td> No title available </td>");
            }
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter a URL of a RSS 2.0 feed: ");
        String url = in.nextLine();
        XMLTree userTree = new XMLTree1(url);
        XMLTree channel = userTree.child(0);

        out.println(
                "Enter the name for an output file with the .html extension: ");
        String htmlOut = in.nextLine();
        SimpleWriter htmlOutFile = new SimpleWriter1L(htmlOut);

        String root = userTree.label(), rootAt = "";

        //Verifies the url is a RSS 2.0 feed
        if (root.equals("rss")) {
            if (userTree.hasAttribute("version")) {
                rootAt = userTree.attributeValue("version");
            }
        }

        if (rootAt.contentEquals("2.0")) {
            //creating the output file
            outputHeader(channel, htmlOutFile);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), htmlOutFile);
                }
            }
            outputFooter(htmlOutFile);

        } else {
            out.println("Not a valid URL of a RSS 2.0 feed.");
        }

        in.close();
        out.close();
    }

}